// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}



model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}


model User {
  id               String @id @default(cuid())
  name             String?
  email            String? @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  jobs            Job[] @relation("PostedJobs")
  applications     Application[]
}

model Job {
  id               String @id @default(cuid())
  title            String
  company          String
  location         String
  type             String
  description      String @db.Text
  salary           String?
  postedAt         DateTime @default(now())
  postedBy        User @relation("PostedJobs", fields: [postedById], references: [id])
  postedById      String
  applications     Application[]
}

model Application {
  id              String @id @default(cuid())
  jobId           String
  userId          String
  status          String @default("PENDING") // Reviewing - Accepting - Rejected
  appliedAt       DateTime @default(now())
  user            User @relation(fields: [userId],references: [id])
  job             Job @relation(fields: [jobId],references: [id])
  
  @@unique([userId,jobId])
}
